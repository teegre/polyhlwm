#! /usr/bin/env bash

hc() { herbstclient "$@"; }

_debug() {
  echo "$(date "+%s") $1" >> "$HOME/myhc.log"
}

_get_focused() {
  local _mon
  # get focused monitor info
  while read -r _mon; do
    [[ $_mon =~ \[FOCUS\]$ ]] && { echo "$_mon"; return 0; }
  done <<< "$(hc list_monitors)"
  return 1
}

_get_tag() {
  local _tag
  # extract tag from focused monitor info
  IFS=$'\n' read -d "" -ra _tag <<< "${1//\"/$'\n'}"
  echo "${__tag[1]}"
}

get_focused_tag() {
  local _mon
  _mon="$(_get_focused)" || return 1
  _get_tag "$_mon"
  return 0
}

get_float_tag() {
  local attr
  while read -r attr; do
    [[ $attr =~ ^.*tag.*$ ]] && {
      _get_tag "$attr"
      return 0
    }
  done <<< "$(hc attr clients."$(<"$floaterm")")"
  return 1
}

get_focused_mon() {
  local _mon
  _mon="$(_get_focused)"
  echo "${_mon:0:1}"
}

get_layout() {
  local _layout __layout _tag L
  _tag="${1:-"$(get_focused_tag)"}"
  while read -r L; do
    [[ $L =~ \[FOCUS\]$ ]] && { _layout="$L"; break; }
  done < <(hc layout "$_tag")
  unset L
  IFS=$'\n' read -d "" -ra __layout <<< "${_layout// /$'\n'}"
  echo "${__layout[1]:0:-1}"
}

set_layout() {
  case $1 in
    v) hc set_layout vertical   ;;
    h) hc set_layout horizontal ;;
    m) hc set_layout max        ;;
    g) hc set_layout grid       ;;
    f) hc floating toggle       ;;
    *) hc set_layout vertical
  esac
  hc emit_hook "layout_changed"
}

# we want tag to stay on the monitor it has been assign to
# unless we need to explicitly move it to another monitor.
# so we need to keep track of monitors/tags.
# when a tag is used on a monitor, save "tag::monitor".
# for consistency, when cycling monitors, we have to call cycle_monitor
# function to get the focused tag and invoke the switch_to_tag function.

__SAVEDTAGS="/tmp/herbstluftwm:tag_save_state"

_is_tag_empty() {
  local _tag="$1"
  [[ $_tag ]] || return 1
  IFS=$'\t' read -ra __status <<< "$(hc tag_status)"
  for tag in "${__status[@]}"; do
    [[ ${tag:1} == "$_tag" ]] && [[ ${tag:0:1} == "." ]] && return 0
  done
  return 1
}

discard_empty_tags() {
  local _tag="$1"
  IFS=$'\n' read -d "" -ra _ss < "$__SAVEDTAGS"
  :> "$__SAVEDTAGS"
  local T
  for ((i=0;i<=${#_ss};i++)); do
    [[ ! ${_ss[$i]} ]] && continue
    [[ ${_ss[$i]} =~ ^(.+)::.+$ ]] && T="${BASH_REMATCH[1]}"
    if [[ $T == "$_tag" ]]; then
      echo "${_ss[$i]}" >> "$__SAVEDTAGS"
    else
      _is_tag_empty "$T" && continue
      echo "${_ss[$i]}" >> "$__SAVEDTAGS"
    fi
  done
}

save_tag_mon() {
  local mon _tag="$1"
  mon="$(hc attr monitors.focus.index)"
  if [[ ! -f "$__SAVEDTAGS" ]]; then
    echo "$_tag::$mon" > "$__SAVEDTAGS"
  elif ! get_tag_mon "$_tag" > /dev/null; then
    echo "$_tag::$mon" >> "$__SAVEDTAGS"
    return 0
  else
    local _ss i
    IFS=$'\n' read -d "" -ra _ss < "$__SAVEDTAGS"
    for ((i=0;i<${#_ss};i++)); do
      [[ ${_ss[$i]} =~ ^$_tag ]] && {
        [[ ${_ss[$i]} == "$_tag::$mon" ]] && {
          return 0
        }
        _ss[$i]="$_tag::$mon"
        :> "$__SAVEDTAGS"
        local j
        for ((j=0;j<${#_ss};j++)); do
          echo "${_ss[$j]}" >> "$__SAVEDTAGS"
        done
        return 0
     }
    done
  fi
  return 1
}

get_tag_mon() {
  local mon _tag="$1"
  mon="$(hc attr monitors.focus.index)"
  [[ ! -f "$__SAVEDTAGS" ]] && {
    echo "$mon"
    return 1
  }
  while read -r __tag; do
    [[ $__tag =~ ^$_tag ]] && {
      IFS=$'\n' read -d "" -ra _ss <<< "${__tag//::/$'\n'}"
      echo "${_ss[1]}"
      return 0
    }
  done <<< "$(< "$__SAVEDTAGS")"
  echo "$mon"
  return 1
}

switch_to_tag() {
  local mon _tag
  _tag="$(hc get_attr tags."${1}".name)"
  mon="$(get_tag_mon "$_tag")"
  hc chain . lock . focus_monitor "$mon" . use "$_tag" . unlock
  save_tag_mon "$_tag"
  discard_empty_tags "$_tag"
}

switch_to_monitor() {
  # FIXME: tags shouldn't be swapped,
  # but only moved from one monitor to another.
  local _tag
  _tag="$1"
  hc set swap_monitors_to_get_tag true
  hc chain . lock . use "$_tag" . unlock
  hc set swap_monitors_to_get_tag false
  save_tag_mon "$_tag"
}

jump_to_urgent() {
  local tag tags
  IFS=$'\t' read -ra tags <<< "$(hc tag_status)"
  for tag in "${tags[@]}"; do
    [[ $tag =~ ^!(.+) ]] && {
      switch_to_tag "$(hc get_attr tags.by-name."${BASH_REMATCH[1]}".index)"
      return 0
    }
  done
  return 1
}

# TODO: cycle_all

# floating terminal

_get_geometry() {
  # get focused monitor geometry
  # and floaterm size
  local mon __wgeom _wgeom mh mw ox oy wh ww
  mon="$(_get_focused)"
  [[ $mon =~ ^.*:\ ([0-9]+)x([0-9]+)\+([0-9]+)\+([0-9]+).*$ ]] && {
    mw="${BASH_REMATCH[1]}" # monitor width
    mh="${BASH_REMATCH[2]}" # monitor height
    ox="${BASH_REMATCH[3]}" # monitor horizontal offset
    oy="${BASH_REMATCH[4]}" # monitor vertical offset
  }
  while read -r __wgeom; do
    [[ $__wgeom =~ ^Geometry: ]] && { _wgeom="$__wgeom"; break; }
  done < <(xdotool search --classname "floaterm" getwindowgeometry)
  [[ $_wgeom =~ ^.*:\ ([0-9]+)x([0-9]+)$ ]] && {
    ww="${BASH_REMATCH[1]}" # window width
    wh="${BASH_REMATCH[2]}" # windo height
  }
  _geom=($((mw)) $((mh)) $((ox)) $((oy)) $((ww)) $((wh)))
}

_center_floaterm() {
  local mh mw ox oy wh ww x y
  local _geom
  _get_geometry
  echo "${_geom[*]}"
  mw="${_geom[0]}"
  mh="${_geom[1]}"
  ox="${_geom[2]}"
  oy="${_geom[3]}"
  ww="${_geom[4]}"
  wh="${_geom[5]}"
  ((x=((mw-ww)/2)+ox))
  ((y=((mh-wh)/2)+oy))
  xdotool search --classname "floaterm" windowmove $((x)) $((y))
}

handle_floaterm() {
  local client
  client="$(<"$floaterm")"
  if xdotool search --onlyvisible --classname "floaterm"; then
    ctag="$(get_focused_tag)" || return 1
    ftag="$(get_float_tag)" || return 1
    if [[ $ctag == "$ftag" ]]; then
      xdotool search --onlyvisible --classname "floaterm" windowunmap
      return 0
    else
      if ! hc bring "$client" 2> /dev/null; then
        _center_floaterm
        xdotool search --classname "floaterm" windowmap && return 0
      else
        _center_floaterm
        return 0
      fi
    fi
  fi
  
  if [[ -f "$floaterm" ]]; then
    _center_floaterm
    if ! hc bring "$client" 2> /dev/null; then
      xdotool search --classname "floaterm" windowmap && return 0
    else
      return 0
    fi
  fi
  
  if ! xdotool search --classname "floaterm" windowmap; then
    hc unrule instance="floaterm"
    hc rule instance="floaterm" floating=on focus=on
    hc spawn st -n "floaterm" -g "135x28" 2> /dev/null
    # hc spawn "${TERMINAL:-xterm}" -n "floaterm" -g "120x25" 2> /dev/null
    xdotool search --sync --onlyvisible --classname "floaterm"
    _center_floaterm
    hc attr clients.focus.winid > "$floaterm"
    return 0
  fi
  return 1
}

floaterm="/tmp/herbstluftwm:floaterm"

case "$1" in
  float    ) handle_floaterm ;;
  layout   ) get_layout "$2" ;;
  setlayout) set_layout "$2" ;;
  *        ) "$@"
esac
